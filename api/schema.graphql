input DirectoryCreateInput {
  name: String!
  parentId: ID
  isPublished: Boolean
}
input DirectoryUpdateInput {
  name: String
  parentId: ID
  isPublished: Boolean
}
input PageCreateInput {
  fields: [PageFieldCreateInput!]
  isPublished: Boolean
  name: String!
  parentId: ID!
  slug: String
}
input PageFieldCreateInput {
  name: String!
  type: String!
  value: String!
}
input PageFieldRemoveInput {
  name: String!
}
input PageFieldRenameInput {
  name: String!
  renameTo: String!
}
input PageFieldUpdateInput {
  name: String!
  value: String!
}
input PageUpdateInput {
  name: String
  slug: String
  parentId: ID
  isPublished: Boolean
}
input TemplateCreateInput {
  name: String!
  fields: [TemplateFieldCreateInput!]
}
input TemplateFieldCreateInput {
  name: String!
  type: String!
}
input TemplateFieldRemoveInput {
  name: String!
}
input TemplateUpdateInput {
  name: String!
}
input UserCreateInput {
  email: String!
  password: String
}
input UserUpdateInput {
  isActive: Boolean
  email: String
}
type Mutation {
  createDirectory(input: DirectoryCreateInput!): DirectoryOperationResult
  updateDirectory(
    id: ID!
    input: DirectoryUpdateInput!
  ): DirectoryOperationResult
  removeDirectory(id: ID!): Boolean!

  createTemplate(input: TemplateCreateInput!): Template
  templateUpdate(id: ID!, input: TemplateUpdateInput!): TemplateUpdateResult
  createTemplateField(
    id: ID!
    input: TemplateFieldCreateInput!
  ): TemplateUpdateResult
  removeTemplateField(
    id: ID!
    input: TemplateFieldRemoveInput!
  ): TemplateUpdateResult
  removeTemplate(id: ID!): TemplateRemoveResult

  createPage(input: PageCreateInput!): PageOperationResult
  updatePage(
    id: ID!
    input: PageUpdateInput
    addFields: [PageFieldCreateInput!]
    removeFields: [String!]
  ): PageOperationResult
  removePage(id: ID!): PageRemoveResult

  changeUserPassword(id: ID!, password: String!): Boolean!
  createUser(
    input: UserCreateInput!
    sendInvitation: Boolean
  ): UserOperationResult!
  removeUser(id: ID!): UserRemoveResult!
  updateUser(id: ID!, input: UserUpdateInput!): UserOperationResult!
  resetUserPassword(token: String!, password: String!): Boolean!
  sendUserPasswordResetToken(email: String!): Boolean!

  login(email: String!, password: String!): LoginResult!
  verifyToken(token: String!): VerifyTokenResult
}
type Query {
  getDirectory(id: ID!): Directory
  getDirectories: [Directory]
  getRootDirectories: [Directory]

  template(id: ID!): Template
  templates: [Template]

  page(id: ID!): Page
  pages: [Page]

  user(id: ID!): User
  users: [User]
}
schema {
  query: Query
  mutation: Mutation
}
type Directory {
  id: ID!
  createdAt: String!
  updatedAt: String!
  name: String!
  parent: Directory
  isPublished: Boolean!
  children: [Directory]
  pages: [Page]
}
type DirectoryOperationResult {
  errors: [InputError!]!
  directory: Directory
}
type InputError {
  code: Int!
  field: String!
  message: String!
}
type LoginResult {
  token: String
  user: User
}
type Page {
  id: ID!
  createdAt: String!
  updatedAt: String!
  name: String!
  slug: String!
  isPublished: Boolean!
  fields: [PageField]
  parent: Directory!
}
type PageField {
  id: ID!
  name: String!
  type: String!
  value: String
}
type PageFieldOperationResult {
  userErrors: [UserError]
  page: Page
}
type PageOperationResult {
  errors: [InputError!]!
  page: Page
}
type PageRemoveResult {
  removedObjectId: ID!
}
type Template {
  id: ID!
  createdAt: String!
  updatedAt: String!
  name: String!
  fields: [TemplateField]
}
type TemplateField {
  name: String!
  type: String!
}
type TemplateRemoveResult {
  userErrors: [UserError]
  removedObjectId: ID
}
type TemplateUpdateResult {
  userErrors: [UserError]
  template: Template
}
type User {
  id: ID!
  createdAt: String!
  updatedAt: String!
  email: String!
  isActive: Boolean!
}
type UserError {
  field: String!
  message: String!
}
type UserOperationResult {
  errors: [InputError!]!
  user: User
}
type UserRemoveResult {
  removedObjectId: ID
}
type VerifyTokenResult {
  result: Boolean!
  user: User
}

